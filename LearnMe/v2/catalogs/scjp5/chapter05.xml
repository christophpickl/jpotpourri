<?xml version="1.0" encoding="UTF-8"?>

<QuestionCatalog title="Sun Certified Java Programmer for Java 5 - Chapter 5">

<!-- ***************************************************** 01 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q01 - Ortegorum Function">
    <Text><![CDATA[
        Given the following code:<br />
        <code>
        public class OrtegorumFunction {<br />
        &nbsp;&nbsp;public int computeDiscontinuous(int x) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;int r = 1;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;r += x;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;if ((x > 4) && (x < 10)) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r += 2 * x;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;} else (x <= 4) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r += 3 * x;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r += 4 * x;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;}<br />
        &nbsp;&nbsp;&nbsp;&nbsp;r += 5 * x;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;return r;<br />
        &nbsp;&nbsp;}<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;OrtegorumFunction o = new OrtegorumFunction();<br />
        &nbsp;&nbsp;&nbsp;&nbsp;System.out.println("OF(11) is: " + o.computeDiscontinuous(11));<br />
        } }
        </code>
        What is the result?
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>OF(11) is: 45</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>OF(11) is: 56</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>OF(11) is: 89</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>OF(11) is: 111</code>
            ]]></Text>
            <Feedback><![CDATA[
                Nearly correct, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                Compilation fails.
            ]]></Text>
            <Feedback><![CDATA[
                The <code>if</code> statement is illegal. The <code>if-else-else</code> must be changed to 
                <code>if-else if-else</code>, which would result in <code>OF(11) is: 111</code>.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                An exception is thrown at runtime.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 02 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q02 - Assert Source Compatibility">
    <Text><![CDATA[
        Given two files:<br />
        <code>
        1. class One {<br />
        2. &nbsp;&nbsp;public static void main(String[] args) {<br />
        3. &nbsp;&nbsp;&nbsp;&nbsp;int assert = 0;<br />
        4. &nbsp;&nbsp;}<br />
        5. }
        </code>
        
        <code>
        1. class Two {<br />
        2. &nbsp;&nbsp;public static void main(String[] args) {<br />
        3. &nbsp;&nbsp;&nbsp;&nbsp;assert(false);<br />
        4. &nbsp;&nbsp;}<br />
        5. }
        </code>
        
        And the four command-line invocations:<br />
        <code>
        javac -source 1.3 One.java<br />
        javac -source 1.4 One.java<br />
        javac -source 1.3 Two.java<br />
        javac -source 1.4 Two.java
        </code>
        What is the result? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                Only one compilation will succeed.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                Exactly two compilations will succeed.
            ]]></Text>
            <Feedback><![CDATA[
                Class <code>One</code> will compile (and issue a warning) using the <code>1.3</code> flag, and class 
                <code>Two</code> will compile using the <code>1.4</code> flag.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Exactly three compilations will succeed.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                All four compilations will succeed.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                No compiler warnings will be produced.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                At least one compiler warning will be produced.
            ]]></Text>
            <Feedback><![CDATA[
                
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 03 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q03 - Throwing Exceptions in overridden Methods">
    <Text><![CDATA[
        Given:<br />
        <code>
        import java.io.*;<br />
        class Master {<br />
        &nbsp;&nbsp;String doFileStuff() throws FileNotFoundException { return "a"; }<br />
        }<br />
        class Slave extends Master {<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;String s = null;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;try { s = new Slave().doFileStuff();<br />
        &nbsp;&nbsp;&nbsp;&nbsp;} catch(Exception x) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = "b"; }<br />
        &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s);<br />
        &nbsp;&nbsp;}<br />
        &nbsp;&nbsp;// insert code here<br />
        }
        </code>
        Which, inserted independently at <code>// insert code here</code>, will compile and produce the output 
        "<code>b</code>"? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer correct="true">
            <Text><![CDATA[
                <code>String doFileStuff() { return "b"; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                It's okay for an overriding method to throw the same exceptions, narrower exceptions, or no exceptions. 
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>String doFileStuff() throws IOException { return "b"; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>String doFileStuff(int x) throws IOException{ return "b"; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>String doFileStuff() throws FileNotFoundException { return "b"; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                It's okay for an overriding method to throw the same exceptions, narrower exceptions, or no exceptions. 
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>String doFileStuff() throws NumberFormatException{ return "b"; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                It's okay for an overriding method to throw the same exceptions, narrower exceptions, or no exceptions. 
                And it's okay for the overriding method to throw any runtime exceptions.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>String doFileStuff() throws NumberFormatException, FileNotFoundException { return "b"; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                It's okay for an overriding method to throw the same exceptions, narrower exceptions, or no exceptions. 
                And it's okay for the overriding method to throw any runtime exceptions.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 04 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q04 - Try-Catch-Finally">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Input {<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;String s = "-";<br />
        &nbsp;&nbsp;&nbsp;&nbsp;try {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doMath(args[0]);<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s += "t "; // line 6<br />
        &nbsp;&nbsp;&nbsp;&nbsp;} finally {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s += "f "); }<br />
        &nbsp;&nbsp;}<br />
        &nbsp;&nbsp;public static void doMath(String a) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;int y = 7 / Integer.parseInt(a);<br />
        &nbsp;&nbsp;}<br />
        }
        </code>
        And the command-line invocations:<br />
        <code>
        java Input<br />
        java Input 0
        </code>
        Which are true? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer correct="true">
            <Text><![CDATA[
                Line 6 is executed exactly 0 times.
            ]]></Text>
            <Feedback><![CDATA[
                Since both invocations throw exceptions, line 6 is never reached.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Line 6 is executed exactly 1 times.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answers.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Line 6 is executed exactly 2 times.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answers.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                The <code>finally</code> block is executed exactly 0 times.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answers.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                The <code>finally</code> block is executed exactly 1 times.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answers.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                The <code>finally</code> block is executed exactly 2 times.
            ]]></Text>
            <Feedback><![CDATA[
                Since both exceptions occured within a <code>try</code> block, the <code>finally</code> block will 
                always execute.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Both invocations produce the same exceptions.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answers.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                Each invocation produces a different exception.
            ]]></Text>
            <Feedback><![CDATA[
                The first invocation throws an <code>ArrayIndexOutOfBoundsException</code>, and the second invocation 
                throws an <code>ArithmeticException</code> for the attempt to divide by zero.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 05 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q05 - Postincrement and do-Loop">
    <Text><![CDATA[
        Given:<br />
        <code>
        1. class Crivitch {<br />
        2. &nbsp;&nbsp;public static void main(String[] args) {<br />
        3. &nbsp;&nbsp;&nbsp;&nbsp;int x = 0;<br />
        4. &nbsp;&nbsp;&nbsp;&nbsp;// insert code here<br />
        5. &nbsp;&nbsp;&nbsp;&nbsp;do { } while(x++ < y);<br />
        6. &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(x);<br />
        7. &nbsp;&nbsp;}<br />
        8. }
        </code>
        Which, inserted at line 4, produces the output 12?
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>int y = x;</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>int y = 10;</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>int y = 11;</code>
            ]]></Text>
            <Feedback><![CDATA[
                <code>x</code> reaches the value of <code>11</code>, at which point the <code>while</code> test fails. 
                <code>x</code> is then incremented (after the comparison test!), and the <code>println()</code> method
                runs.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>int y = 12;</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>int y = 13;</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                None of the above will allow compilation to succeed.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 06 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q06 - ">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Plane {<br />
        &nbsp;&nbsp;static String s = "-";<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;new Plane().s1();<br />
        &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s);<br />
        &nbsp;&nbsp;}<br />
        &nbsp;&nbsp;void s1() {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;try { s2(); }<br />
        &nbsp;&nbsp;&nbsp;&nbsp;catch (Exception e) { s += "c"; }<br />
        &nbsp;&nbsp;}<br />
        &nbsp;&nbsp;void s2() throws Exception {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;s3(); s+= "2";<br />
        &nbsp;&nbsp;&nbsp;&nbsp;s4(); s+= "2b";<br />
        &nbsp;&nbsp;}<br />
        &nbsp;&nbsp;void s3() throws Exception {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;throw new Exception();<br />
        } }
        </code>
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>-</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>-c</code>
            ]]></Text>
            <Feedback><![CDATA[
                Once <code>s3()</code> throws the exception to <code>s2()</code>, <code>s2()</code> throws it to 
                <code>s1()</code>, and no more of <code>s2()</code>'s code will be executed.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-c2</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-2c</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-c22b</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-2c2b</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-2c2bc</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Compilation fails.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 07 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q07 - Catching exceptions of Integer.parseInt">
    <Text><![CDATA[
        Given:<br />
        <code>
        try { int x = Integer.parseInt("two"); }
        </code>
        Which could be used to create an appropriate <code>catch</code> block? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>ClassCastException</code>
            ]]></Text>
            <Feedback><![CDATA[
                The exception class is not in <code>NumberFormatException</code>'s class hierarchy.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>IllegalStateException</code>
            ]]></Text>
            <Feedback><![CDATA[
                The exception class is not in <code>NumberFormatException</code>'s class hierarchy.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>NumberFormatException</code>
            ]]></Text>
            <Feedback><![CDATA[
                <code>Integer.parseInt</code> can throw a <code>NumberFormatException</code> and
                <code>IllegalArgumentException</code> is its superclass (i.e., a broader exception).
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>IllegalArgumentException</code>
            ]]></Text>
            <Feedback><![CDATA[
                
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>ExceptionInInitializerError</code>
            ]]></Text>
            <Feedback><![CDATA[
                The exception class is not in <code>NumberFormatException</code>'s class hierarchy.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>ArrayIndexOutOfBoundsException</code>
            ]]></Text>
            <Feedback><![CDATA[
                The exception class is not in <code>NumberFormatException</code>'s class hierarchy.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 08 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q08 - Polymorphich Exception throwing">
    <Text><![CDATA[
        Given:<br />
        <code>
        01. class Ping extends Utils {<br />
        02. &nbsp;&nbsp;public static void main(String[] args) {<br />
        03. &nbsp;&nbsp;&nbsp;&nbsp;Utils u = new Ping();<br />
        04. &nbsp;&nbsp;&nbsp;&nbsp;System.out.print(u.getInt(args[0]));<br />
        05. &nbsp;&nbsp;}<br />
        06. &nbsp;&nbsp;int getInt(String arg) {<br />
        07. &nbsp;&nbsp;&nbsp;&nbsp;return Integer.parseInt(arg);<br />
        08. &nbsp;&nbsp;}<br />
        09. }<br />
        10. class Utils {<br />
        11. &nbsp;&nbsp;int getInt(String x) throws Exception { return 7; }<br />
        12. }
        </code>
        And the following three possible changes:<br />
        C1. Declare that <code>main()</code> throws an <code>Exception</code>.
        C2. Declare that <code>Ping.getInt()</code> throws an <code>Exception</code>.
        C3. Wrap the invocation of <code>getInt()</code> in a <code>try / catch</code> block.<br />
        Which change(s) allow the code to compile? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer correct="true">
            <Text><![CDATA[
                Just C1 is sufficient.
            ]]></Text>
            <Feedback><![CDATA[
                Remember that line 4 is making a polymorphic call so the compiler knows that an exception might be 
                thrown. If C1 is implemented the exception has been sufficiently declared, and if C3 is implemented 
                the exception has been sufficiently handled. C2 is not necessary in either case.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Just C2 is sufficient.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                Just C3 is sufficient.
            ]]></Text>
            <Feedback><![CDATA[
                Remember that line 4 is making a polymorphic call so the compiler knows that an exception might be 
                thrown. If C1 is implemented the exception has been sufficiently declared, and if C3 is implemented 
                the exception has been sufficiently handled. C2 is not necessary in either case.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Both C1 and C2 are required.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Both C1 and C3 are required.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Both C2 and C3 are required.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                All three changes are required.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 09 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q09 - Switch">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Swill {<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;String s = "-";<br />
        &nbsp;&nbsp;&nbsp;&nbsp;switch(TimeZone.CST) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case EST: s += "e";<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case CST: s += "c";<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case MST: s += "m";<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;&nbsp;s += "X";<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case PST: s += "p";<br />
        &nbsp;&nbsp;&nbsp;&nbsp;}<br />
        &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s);<br />
        &nbsp;&nbsp;}<br />
        }<br />
        enum TimeZone { EST, CST, MST, PST }
        </code>
        What is the result?
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>-c</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-X</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-cm</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-cmp</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>-cmXp</code>
            ]]></Text>
            <Feedback><![CDATA[
                It's legal to use enums in a <code>switch</code>, and normal <code>switch</code> fall-through logic
                applies; i.e., once a match is made the <code>switch</code> has been entered, and all remaining blocks 
                will run if no <code>break</code> statement is encountered. Note: <code>default</code> doesn't have to
                be last.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Compilation fails.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                An exception is thrown at runtime.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 10 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q10 - ">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Circus {<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;int x = 9;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;int y = 6;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;for(int z = 0; z < 6; z++, y--) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(x > 2) x--;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label:<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(x > 5) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(x + " ");<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--x;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue label;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x--;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;}<br />
        &nbsp;&nbsp;}<br />
        }
        </code>
        What is the result?
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>8</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>8 7</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>8 7 6</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                Compilation fails.
            ]]></Text>
            <Feedback><![CDATA[
                A labeled <code>continue</code> works <i>only</i> with loops. In this case, although the label is legal,
                <code>label</code> is not a label on a loop statement, it's a label on an <code>if</code> statement.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                An exception is thrown at runtime.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 11 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q11 - Statements about Assertions">
    <Text><![CDATA[
        Which are true? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                It is appropriate to use assertions to validate arguments to methods marked <code>public</code>.
            ]]></Text>
            <Feedback><![CDATA[
                It <i>is</i> acceptable to use assertions to test the arguments of <code>private</code> methods.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                It is appropriate to catch and handle assertion errors.
            ]]></Text>
            <Feedback><![CDATA[
                While assertion errors can be caught, Sun discourages you from doing so.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                It is NOT appropraite to use assertions to validate command-line arguments.
            ]]></Text>
            <Feedback><![CDATA[
                Correct statement.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                It is appropriate to use assertions to generate alerts when you reach code that should not be reachable.
            ]]></Text>
            <Feedback><![CDATA[
                Correct statement.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                Is is NOT appropriate for assertions to change a program's state.
            ]]></Text>
            <Feedback><![CDATA[
                Correct statement.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 12 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q12 - Correct for-Loop">
    <Text><![CDATA[
        Given:<br />
        <code>
        1. class Loopy {<br />
        2. &nbsp;&nbsp;public static void main(String[] args) {<br />
        3. &nbsp;&nbsp;int[] x = {7,6,5,4,3,2,1};<br />
        4. &nbsp;&nbsp;// insert code here<br />
        5. &nbsp;&nbsp;&nbsp;&nbsp;System.out.print(y + " ");<br />
        6. &nbsp;&nbsp;}<br />
        7. } }
        </code>
        Which, inserted independently at line 4, compiles? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer correct="true">
            <Text><![CDATA[
                <code>for(int y : x) {</code>
            ]]></Text>
            <Feedback><![CDATA[
                Correct example of the enhanced <code>for</code> loop.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>for(x : int y) {</code>
            ]]></Text>
            <Feedback><![CDATA[
                The operands of the <code>for</code> loop are swapped.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>int y = 0; for(y : x) {</code>
            ]]></Text>
            <Feedback><![CDATA[
                The enhanced <code>for</code> must declare its first operand.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>for(int y=0, z=0; z<x.length; z++) { y = x[z];</code>
            ]]></Text>
            <Feedback><![CDATA[
                Correct example of the basic <code>for</code> loop.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>for(int y=0, int z=0; z<x.length; z++) { y = x[z];</code>
            ]]></Text>
            <Feedback><![CDATA[
                This is incorrect syntax to declare two variables in a <code>for</code> statement.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>int y = 0; for(int z=0; z<x.length; z++) { y = x[z];</code>
            ]]></Text>
            <Feedback><![CDATA[
                Correct example of the basic <code>for</code> loop.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 13 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q13 - Correct Switch statement">
    <Text><![CDATA[
        Given:<br />
        <code>
        01. class Ring {<br />
        02. &nbsp;&nbsp;final static int x2 = 7;<br />
        03. &nbsp;&nbsp;final static Integer x4 = 8;<br />
        04. &nbsp;&nbsp;public static void main(String[] args) {<br />
        05. &nbsp;&nbsp;&nbsp;&nbsp;Integer x1 = 5;<br />
        06. &nbsp;&nbsp;&nbsp;&nbsp;String s = "a";<br />
        07. &nbsp;&nbsp;&nbsp;&nbsp;if(x1 < 9) s += "b";<br />
        08. &nbsp;&nbsp;&nbsp;&nbsp;switch(x1) {<br />
        09. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 5:&nbsp;&nbsp;s += "c";<br />
        10. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case x2: s += "d";<br />
        11. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case x4: s += "e";<br />
        12. &nbsp;&nbsp;&nbsp;&nbsp;}<br />
        13. &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s);<br />
        14. &nbsp;&nbsp;}<br />
        15. }
        </code>
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>abc</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>abcde</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Compilation fails due only to an error on line 7.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Compilation fails due only to an error on line 8.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Compilation fails due only to an error on line 10.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                Compilation fails due only to an error on line 11.
            ]]></Text>
            <Feedback><![CDATA[
                A <code>switch</code> statement requires its <code>case</code> expressions to be constants, and wrapper 
                variables (even <code>final static</code> ones) aren't considered constants. The rest of the code is
                correct.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Compilation fails due to errors on multiple lines.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 14 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q14 - Nested try-catch-blocks">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Emu {<br />
        &nbsp;&nbsp;static String s = "-";<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;try {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Exception();<br />
        &nbsp;&nbsp;&nbsp;&nbsp;} catch(Exception e) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try { throw new Exception();<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (Exception ex) { s += "ic "; }<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Exception(); }<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (Exception x) { s += "mc "; }<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finally { s += "mf "; }<br />
        &nbsp;&nbsp;&nbsp;&nbsp;} finally { s += "of "; }<br />
        &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s);<br />
        } }
        </code>
        What is the result?
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>-ic of</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-mf of</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-mc mf</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-ic mf of</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>-ic mc mf of</code>
            ]]></Text>
            <Feedback><![CDATA[
                There is no problem nesting <code>try</code> / <code>catch</code> blocks. As is normal, when an 
                exception is thrown, the code in the <code>catch</code> block runs, then the code in the 
                <code>finally</code> block runs.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>-ic mc of mf</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Compilation fails.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 15 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q15 - Gem Miner">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Mineral { }<br />
        class Gem extends Mineral { }<br />
        class Miner {<br />
        &nbsp;&nbsp;static int x = 7;<br />
        &nbsp;&nbsp;static String s = null;<br />
        &nbsp;&nbsp;public static void getWeight(Mineral m) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;int y = 0 / x;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;System.out.print(s + " ");<br />
        &nbsp;&nbsp;}<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;Mineral[] ma = {new Mineral(), new Gem()};<br />
        &nbsp;&nbsp;&nbsp;&nbsp;for(Object o : ma)<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getWeight((Mineral) o);<br />
        &nbsp;&nbsp;}<br />
        }
        </code>
        And the command-line invocation:<br />
        <code>
        java Miner.java
        </code>
        What is the result?
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>null</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>null null</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                A <code>ClassCastException</code> is thrown.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                A <code>NullPointerException</code> is thrown.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                A <code>NoClassDefFoundError</code> is thrown.
            ]]></Text>
            <Feedback><![CDATA[
                The invocation should be <code>java Miner</code>, in which case <code>null null</code> would be 
                produced.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                A <code>ArithmeticException</code> is thrown.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                An <code>IllegalArgumentException</code> is thrown.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                An <code>ArrayIndexOutOfBoundsException</code> is thrown.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 16 ***************************************************** -->
<MultipleChoiceQuestion title="C05Q16 - ">
    <Text><![CDATA[
        Which are most typically thrown by an API developer or an application developer as opposed to being thrown by 
        the JVM? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>ClassCastException</code>
            ]]></Text>
            <Feedback><![CDATA[
                Thrown by the JVM.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>IllegalStateException</code>
            ]]></Text>
            <Feedback><![CDATA[
                Typically used to report an environment problem such as trying to access a resource that's closed.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>NumberFormatException</code>
            ]]></Text>
            <Feedback><![CDATA[
                Often thrown in API methods that attempt to convert poorly formed String arguments to numeric values.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>IllegalArgumentException</code>
            ]]></Text>
            <Feedback><![CDATA[
                Often thrown in API methods that receive poorly formed arguments.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>ExceptionInInitializerError</code>
            ]]></Text>
            <Feedback><![CDATA[
                Thrown by the JVM.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

</QuestionCatalog>
