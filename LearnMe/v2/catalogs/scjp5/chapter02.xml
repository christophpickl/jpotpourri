<?xml version="1.0" encoding="UTF-8"?>

<QuestionCatalog title="Sun Certified Java Programmer for Java 5 - Chapter 2">

<!-- ***************************************************** 01 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q01 - Has-a relationship">
    <Text><![CDATA[
        Which statement(s) are true? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                Has-a relationships always rely on inheritance.
            ]]></Text>
            <Feedback><![CDATA[
                Inheritance describes another OO topic.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Has-a relationships always rely on instance variables.
            ]]></Text>
            <Feedback><![CDATA[
                Correct :)
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Has-a relationships always requrie at least two class types.
            ]]></Text>
            <Feedback><![CDATA[
                A class can have an instance of itself.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Has-a relationships always rely on polymorphism.
            ]]></Text>
            <Feedback><![CDATA[
                Inheritance describes another OO topic.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Has-a relationships are always tightly coupled.
            ]]></Text>
            <Feedback><![CDATA[
                While has-a relationships can lead to tight coupling, it is by no means <b>always</b> the case.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 02 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q02 - Overriding methods">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Clidders {<br />
        &nbsp;&nbsp;public final void flipper() { System.out.println("Clidder"); }<br />
        }<br />
        public class Clidlets extends Clidders {<br />
        &nbsp;&nbsp;public void flipper() {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Flip a Clidlet");<br />
        &nbsp;&nbsp;&nbsp;&nbsp;super.flipper();<br />
        &nbsp;&nbsp;}<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;new Clidlets().flipper();<br />
        &nbsp;&nbsp;}<br />
        }
        </code>
        What is the result?
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>Flip a Clidlet</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, because <code>final</code> methods cannot be overridden.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>Flip a Clidder</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, because <code>final</code> methods cannot be overridden.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>
                Flip a Clidder<br />
                Flip a Clidlet
                </code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, because <code>final</code> methods cannot be overridden.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>
                Flip a Clidlet<br />
                Flip a Clidder
                </code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect, because <code>final</code> methods cannot be overridden.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                Compilation fails.
            ]]></Text>
            <Feedback><![CDATA[
                <code>final</code> methods cannot be overridden.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 03 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q03 - Implementing Interfaces">
    <Text><![CDATA[
        Given:<br />
        <code>
        public abstract interface Frobnicate {<br />
        &nbsp;&nbsp;public void twiddle(String s);<br />
        }
        </code>
        Which is a correct class? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>
                public abstract class Frob implements Frobnicate {<br />
                &nbsp;&nbsp;public abstract void twiddle(String s) { }<br />
                }
                </code>
            ]]></Text>
            <Feedback><![CDATA[
                <code>abstract</code> methods have no body.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>
                public abstract class Frob implements Frobnicate { }
                </code>
            ]]></Text>
            <Feedback><![CDATA[
                An <code>abstract</code> class need not implement any or all of an interface's methdos.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>
                public class Frob extends Frobnicate {<br />
                &nbsp;&nbsp;public void twiddle(Integer i) { }<br />
                }
                </code>
            ]]></Text>
            <Feedback><![CDATA[
                Classes implement interfaces, they don't extend them.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>
                public class Frob implements Frobnicate {<br />
                &nbsp;&nbsp;public void twiddle(Integer i) { }<br />
                }
                </code>
            ]]></Text>
            <Feedback><![CDATA[
                Overloading a method is not implementing it.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>
                public class Frob implements Frobnicate {<br />
                &nbsp;&nbsp;public void twiddle(String i) { }<br />
                &nbsp;&nbsp;public void twiddle(Integer s) { }<br />
                }
                </code>
            ]]></Text>
            <Feedback><![CDATA[
                The class implements the interface method and additionally overloads the <code>twiddle</code> method.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 04 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q04 - Multiple Constructors">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Top {<br />
        &nbsp;&nbsp;public Top(String s) { System.out.println("B"); }<br />
        }<br />
        public clas Bottom2 extends Top {<br />
        &nbsp;&nbsp;public Bottom2(String s) { System.out.println("D"); }<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;new Bottom2("C");<br />
        &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(" ");<br />
        &nbsp;&nbsp;}<br />
        }
        </code>
        What is the result?
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>BD</code>
            ]]></Text>
            <Feedback><![CDATA[
                See feedback of answer "Compilation fails".
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>DB</code>
            ]]></Text>
            <Feedback><![CDATA[
                See feedback of answer "Compilation fails".
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>BDC</code>
            ]]></Text>
            <Feedback><![CDATA[
                See feedback of answer "Compilation fails".
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>DBC</code>
            ]]></Text>
            <Feedback><![CDATA[
                See feedback of answer "Compilation fails".
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                Compilation fails.
            ]]></Text>
            <Feedback><![CDATA[
                The implied <code>super</code> call in Bottom2's constructor cannot be satisfied because there isn't
                a no-arg constructor in Top. A default, no-arg constructor is generated by the compiler only if the
                class has no constructor defined explicitly.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 05 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q05 - Low Coupling">
    <Text><![CDATA[
        Select the <b>two</b> statements that best indicate a situation with low coupling. (Choose two.)
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                The attributes of the class are all <code>private</code>.
            ]]></Text>
            <Feedback><![CDATA[
                Variables (attributes) in a class should usually be private, but this describes encapsulation,
                rather than low coupling. Of course, good encapsulation tends to reduce coupling as a consequence.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                The class refers to a small number of other objects.
            ]]></Text>
            <Feedback><![CDATA[
                Referring to only a small number of other objects might imply low coupling,
                but if each object has man methods, and all are used, then coupling is high.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                The object contains only a small number of variables.
            ]]></Text>
            <Feedback><![CDATA[
                See feedback of correct answers.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                The object is referred to using an anonymous variable, not directly.
            ]]></Text>
            <Feedback><![CDATA[
                There is no such thing as an anonymous varaible.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                The reference variable is declared for an interface type, not a class.
                The interface provides a small number of methods.
            ]]></Text>
            <Feedback><![CDATA[
                Only having access to a small number of methods implies limited coupling.
                If the access is via a reference of interface type, it may be argued that there is even less
                opportunity for coupling as the class type itself is not visible.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                It is unlikely that changes made to one class will require any changes in another.
            ]]></Text>
            <Feedback><![CDATA[
                Stating that changes in one part of a program are unlikely to cause consequences in another part is
                really the essence of low coupling.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 06 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q06 - Overriding Methods">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Clidder {<br />
        &nbsp;&nbsp;private final void flipper() { System.out.println("Clidder"); }<br />
        }<br />
        public class Clidlet extends Clidder {<br />
        &nbsp;&nbsp;public final void flipper() { System.out.println("Clidlet"); }<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;new Clidlet().flipper();<br />
        &nbsp;&nbsp;}<br />
        }
        </code>
        What is the result?
    ]]></Text>
    <Answers>
        <Answer correct="true">
            <Text><![CDATA[
                <code>Clidlet</code>
            ]]></Text>
            <Feedback><![CDATA[
                Although a final method cannot be overridden, in this case, the method is private and therefore hidden.
                The effect is that a new, accessible method flipper is created.
                Therefore, no polymorphism occurs in this example, the method invoked is simply that of the child class,
                and no error occurs.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>Clidder</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>Clidder<br />Clidlet</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>Clidlet<br />Clidder</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Compilation fails.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 07 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q07 - Invoking the Super Constructor">
    <Text><![CDATA[
        Given:<br />
        <code>
        class AgedP {<br />
        &nbsp;&nbsp;AGedP() { }<br />
        &nbsp;&nbsp;public AgedP(int x) { }<br />
        }<br />
        public class Kinder extends AgedP {<br />
        &nbsp;&nbsp;public Kinder(int x) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;super();<br />
        &nbsp;&nbsp;}<br />
        }
        </code>
        Does the code compile?
    ]]></Text>
    <Answers>
        <Answer correct="true">
            <Text><![CDATA[
                Yes
            ]]></Text>
            <Feedback><![CDATA[
                Using the package-private super null-arg constructor is totally legal.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                No
            ]]></Text>
            <Feedback><![CDATA[
                The code compiles.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 08 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q08 - Co-variant Return Types">
    <Text><![CDATA[
        Given:<br />
        <code>
        1. class Plant {<br />
        2. &nbsp;&nbsp;String getName() { return "plant"; }<br />
        3. &nbsp;&nbsp;Plant getType() { return this; }<br />
        4. }<br />
        5. class Flower extends Plant {<br />
        6. &nbsp;&nbsp;// insert code here<br />
        7. }<br />
        8. class Tulip extends Flower { }<br />
        </code>
        Which statement(s), inserted at line 6, will compile? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer correct="true">
            <Text><![CDATA[
                <code>Flower getType() { return this; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                This is an example of co-variant returns (<code>Flower</code> is a subtype of <code>Plant</code>).
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>String getType() { return "this"; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                <code>String</code> is not a subtype of <code>Plant</code>.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>Plant getType() { return this; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                This is an example of co-variant returns.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>Tulip getType() { return new Tulip(); }</code>
            ]]></Text>
            <Feedback><![CDATA[
                This is an example of co-variant returns (<code>Tulip</code> is a subtype of <code>Plant</code>).
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 09 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q09 - Is-a and Has-a Relationship">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Zing {<br />
        &nbsp;&nbsp;protected Hmpf h;<br />
        }<br />
        class Woop extends Zing { }<br />
        class Hmpf { }
        </code>
        Which is true? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>Woop is-a Hmpf</code> and <code>has-a Zing</code>.
            ]]></Text>
            <Feedback><![CDATA[
                <code>Woop</code> inherits a <code>Hmpf</code> from <code>Zing</code>.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>Zing is-a Woop</code> and <code>has-a Hmpf</code>.
            ]]></Text>
            <Feedback><![CDATA[
                <code>Woop</code> inherits a <code>Hmpf</code> from <code>Zing</code>.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>Hmpf has-a Woop</code> and <code>Woop is-a Zing</code>.
            ]]></Text>
            <Feedback><![CDATA[
                <code>Woop</code> inherits a <code>Hmpf</code> from <code>Zing</code>.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>Woop has-a Hmpf</code> and <code>Woop is-a Zing</code>.
            ]]></Text>
            <Feedback><![CDATA[
                <code>Woop</code> inherits a <code>Hmpf</code> from <code>Zing</code>.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>Zing has-a Hmpf</code> and <code>Zing is-a Woop</code>.
            ]]></Text>
            <Feedback><![CDATA[
                <code>Woop</code> inherits a <code>Hmpf</code> from <code>Zing</code>.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 10 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q10 - Overriding and Overloading">
    <Text><![CDATA[
        Given:<br />
        <code>
        1. class Programmer {<br />
        2. &nbsp;&nbsp;Programmer debug() { return this; }<br />
        3. }<br />
        4. class SCJP extends Programmer {<br />
        5. &nbsp;&nbsp;// insert code here<br />
        6. }
        </code>
        Which, inserted at lien 5, will compile? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer correct="true">
            <Text><![CDATA[
                <code>Programmer debug() { return this; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                This is an example of overriding.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>SCJP debug() { return this; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                This is an example of overriding using a co-variant return.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>Object debug() { return this; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                This is an illegal override because the return type is incompatible.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>int debug() { return 1; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                This is an illegal override because the return type is incompatible.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>int debug(int x) { return 1; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                This is an example of overloading, not overriding.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>Object debug(int x) { return this; }</code>
            ]]></Text>
            <Feedback><![CDATA[
                This is an example of overloading, not overriding.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 11 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q11 - Chaining Constructors">
    <Text><![CDATA[
        Given:<br />
        <code>
        class Uber {<br />
        &nbsp;&nbsp;static int y = 2;<br />
        &nbsp;&nbsp;Uber(int x) { this(); y = y * 2; }<br />
        &nbsp;&nbsp;Uber() { y++; }<br />
        }<br />
        class Minor extends Uber {<br />
        &nbsp;&nbsp;Minor() { super(y); y = y + 3; }<br />
        &nbsp;&nbsp;public static void main(String[] args) {<br />
        &nbsp;&nbsp;&nbsp;&nbsp;new Minor();<br />
        &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(y);<br />
        &nbsp;&nbsp;}<br />
        }
        </code>
        What is the result?
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                6
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                7
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                8
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                9
            ]]></Text>
            <Feedback><![CDATA[
                Minor's constructor makes an explicit call to Uber's 1-arg constructor, which makes an explicit
                (<code>this</code>) call to Uber's no-arg constructor, which increments y, then returns to the 1-arg
                constructor, which multiples y * 2 and then returns to Minor's constructor, which adds 3 to y.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Compilation fails.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                An exception is thrown.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 12 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q12 - Cohesion">
    <Text><![CDATA[
        Which statement(s) are true? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                Choesion is the OO principle most closely associated with hiding implementation details.
            ]]></Text>
            <Feedback><![CDATA[
                Refers to encapsulation.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Cohesion is the OO principle most closely associated with making sure that classes know about
                other classes only through their APIs.
            ]]></Text>
            <Feedback><![CDATA[
                Refers to coupling.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                Cohesion is the OO principle most closely associated with making sure that a class is designed
                with a single, well-focused purpose.
            ]]></Text>
            <Feedback><![CDATA[
                Correct :)
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                Cohesion is the OO principle most closely associated with allowing a single object to be seen
                as having many types.
            ]]></Text>
            <Feedback><![CDATA[
                Refers to polymorphism.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 13 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q13 - Static Casts">
    <Text><![CDATA[
        Given:<br />
        <code>
        01. class Dog { }<br />
        02. class Beagle extends Dog { }<br />
        03. <br />
        04. class Kennel {<br />
        05. &nbsp;&nbsp;public static void main(String[] args) {<br />
        06. &nbsp;&nbsp;&nbsp;&nbsp;Beable b1 = new Beagle();<br />
        07. &nbsp;&nbsp;&nbsp;&nbsp;Dog dog1 = new Dog();<br />
        08. &nbsp;&nbsp;&nbsp;&nbsp;Dog dog2 = b1;<br />
        09. &nbsp;&nbsp;&nbsp;&nbsp;// insert code here<br />
        10. &nbsp;&nbsp;}<br />
        11. }
        </code>
        Which, inserted at line 9, will compile? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer correct="true">
            <Text><![CDATA[
                <code>Beagle b2 = (Beagle) dog1;</code>
            ]]></Text>
            <Feedback><![CDATA[
                Although this is correct at compile time, at runtime it will throw a <code>ClassCastException</code>
                because <code>dog1</code> refers to a <code>Dog</code> object, which can't be necessary do Beagle stuff. 
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>Beagle b3 = (Beagle) dog2;</code>
            ]]></Text>
            <Feedback><![CDATA[
                Correct, because <code>dog2</code> actually refers to <code>b1</code> which is a Beagle.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>Beagle b4 = dog2;</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedbac of correct answers.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                None of the above statements will compile.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedbac of correct answers.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

<!-- ***************************************************** 14 ***************************************************** -->
<MultipleChoiceQuestion title="C02Q14 - Cast for Invocation">
    <Text><![CDATA[
        Given the following,<br />
        <code>
        01. class X { void do1() { } }<br />
        02. class Y extends X { void do2() { } }<br />
        03. <br />
        04. class Chrome {<br />
        05. &nbsp;&nbsp;public static void main(String[] args) {<br />
        06. &nbsp;&nbsp;&nbsp;&nbsp;X x1 = new X();<br />
        07. &nbsp;&nbsp;&nbsp;&nbsp;X x2 = new Y();<br />
        08. &nbsp;&nbsp;&nbsp;&nbsp;Y y1 = new Y();<br />
        09. &nbsp;&nbsp;&nbsp;&nbsp;// insert code here<br />
        10. &nbsp;&nbsp;}<br />
        11. }
        </code>
        Which, inserted at line 9, will compile? (Choose all that apply.)
    ]]></Text>
    <Answers>
        <Answer>
            <Text><![CDATA[
                <code>x2.do2();</code>
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                <code>(Y)x2.do2();</code>
            ]]></Text>
            <Feedback><![CDATA[
                This statement looks like a proper cast, but without the second set of parentheses, the compiler
                thinks it's an incomplete statement.
            ]]></Feedback>
        </Answer>
        <Answer correct="true">
            <Text><![CDATA[
                <code>((Y)x2).do2()</code>
            ]]></Text>
            <Feedback><![CDATA[
                Before you can invoke <code>Y</code>'s <code>do2</code> method, you have to cast <code>x2</code> to be
                of type <code>Y</code>. 
            ]]></Feedback>
        </Answer>
        <Answer>
            <Text><![CDATA[
                None of the above statements will compile.
            ]]></Text>
            <Feedback><![CDATA[
                Incorrect; see feedback of correct answer.
            ]]></Feedback>
        </Answer>
    </Answers>
</MultipleChoiceQuestion>

</QuestionCatalog>
