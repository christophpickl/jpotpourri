<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	creationComplete="onCreationComplete()">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import net.sourceforge.jpotpourri.learnme.dao.DaoLocator;
			import net.sourceforge.jpotpourri.learnme.vo.IQuestionCatalog;
			import net.sourceforge.jpotpourri.learnme.xml.CatalogParser;
			
			private function onDatabaseConnected(): void {
				DaoLocator.instance.catalogDao.selectCatalogs(onCatalogsFetched);
			}
			
			private function onCatalogsFetched(catalogs: ArrayCollection): void {
				trace("onCatalogsFetched; catalogs.length="+catalogs.length);
				//var c: IQuestionCatalog = IQuestionCatalog(catalogs.getItemAt(0));
				//DaoLocator.instance.reportDao.selectReports(c, onReportsFetched);
			}
			
			private function onReportsFetched(reports: ArrayCollection): void {
				trace("reports.length = " + reports.length);
			}
			
			private function onCreationComplete(): void {
				if(DaoLocator.instance.connected == true) {
					this.onDatabaseConnected();
				} else {
					DaoLocator.instance.connect(onDatabaseConnected);
				}
				
				/*
				var f:File = new File();
				f.url = "file:///D:/FlexDev/LearnMe/question_catalog_scjp.xml"; // TODO how relative path?
				trace(f.nativePath);
				
				var fs:FileStream = new FileStream();
				fs.open(f, FileMode.READ);
				const result: String = fs.readUTFBytes(fs.bytesAvailable);
				fs.close();
				
				var qc: IQuestionCatalog = CatalogParser.parse(result);
				trace("qc: " + qc);
				*/
				
				/*
				var f:File = new File();
				f.url = "file:///D:/FlexDev/LearnMe/question_catalog_include.xml";
				
				var fs1:FileStream = new FileStream();
				fs1.open(f, FileMode.READ);
				var result: String = fs1.readUTFBytes(fs1.bytesAvailable);
				fs1.close();
				
				var includeIndexStart: int = -1;
				var includeIndexEnd: int = -1;
				
				
				includeIndexStart = result.indexOf("<Include>");
				includeIndexEnd = result.indexOf("</Include>");
				while(includeIndexStart != -1) {
					// trace("replacing at index ["+includeIndexStart+"-"+includeIndexEnd+"]");
					var includeFileName: String = result.substr(includeIndexStart + 9, includeIndexEnd - includeIndexStart - 9);
					var includeFile: File = new File();
					includeFile.url = "file:///" + f.parent.nativePath + "/" + includeFileName;
					trace("includeFile: ["+includeFile.nativePath+"]");
					if(includeFile.exists == false) {
						throw new Error("Include file does not exist ["+includeFile.url+"]!");
					}
					
					var fs:FileStream = new FileStream();
					fs.open(includeFile, FileMode.READ);
					var includeFileContent: String = fs.readUTFBytes(fs.bytesAvailable);
					fs.close();
					
					result = result.replace(/<Include>[A-Za-z0-9_\/\.]*<\/Include>/, includeFileContent);
					
					includeIndexStart = result.indexOf("<Include>");
					includeIndexEnd = result.indexOf("</Include>");
				}
				
				
				trace(result);
				*/
				
			}
		]]>
	</mx:Script>
	
</mx:WindowedApplication>
