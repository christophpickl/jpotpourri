<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
	layout="vertical"
	creationComplete="onCreationComplete()"
	xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:view="net.sourceforge.jpotpourri.learnme.view.*">
	
	<mx:Style>
		WindowedApplication {
			padding-top: 0px;
			padding-left: 0px;
			padding-right: 0px;
		}
	</mx:Style>
	
	<mx:Script>
		<![CDATA[
			import mx.events.CloseEvent;
			import mx.collections.ArrayCollection;
			import net.sourceforge.jpotpourri.learnme.vo.IQuestionary;
			import net.sourceforge.jpotpourri.learnme.dao.ICatalogDao;
			import net.sourceforge.jpotpourri.learnme.dao.DaoLocator;
			import net.sourceforge.jpotpourri.learnme.dao.CatalogDao;
			import mx.controls.Alert;
			import net.sourceforge.jpotpourri.learnme.xml.CatalogParser;
			import net.sourceforge.jpotpourri.learnme.vo.IQuestionCatalog;
			import net.sourceforge.jpotpourri.learnme.FileOpener;
			import mx.events.MenuEvent;
			import mx.controls.Menu;
			import mx.collections.XMLListCollection;
			import logging.Logger;
			import logging.LogManager;
			
			private static const LOG:Logger = Logger.getLogger("LearnMe");
			
			[Bindable] private var menuBarData:XMLListCollection = new XMLListCollection(<>
					<menuitem label="File" data="top">
						<menuitem label="Import Catalog ..." data="IMPORT_CATALOG" />
						<menuitem type="separator" />
						<menuitem label="Quit" data="QUIT" />
					</menuitem>
					<menuitem label="View" data="top">
						<menuitem label="Fullscreen" data="FULLSCREEN" type="check" toggled="false" />
					</menuitem>
					</>);
					/*
					<menuitem label="foobar1" type="check" toggled="true" /> ... toggled==selected
					<menuitem label="foobar3" type="radio" groupName="g1" enabled="false" />
					*/
			
			private function onCreationComplete(): void {
				LogManager.getInstance().readProperties("logging.xml");
				DaoLocator.instance.connect(onDatabaseConnected);
			}
			
			private function onDatabaseConnected(): void {
				LOG.info("database connection established.");
			}
			
			private function onMenuClick(event: MenuEvent): void {
				const cmd: String = event.item.@data;
				if(cmd == "top") {
					return; // dont handle top menu item clicks
				}
				LOG.fine("Menu command clicked ["+cmd+"]");
				switch(cmd) {
					case "IMPORT_CATALOG": this.doImportCatalog(); break;
					case "QUIT": this.doQuit(); break;
					case "FULLSCREEN": this.doToggleFullscreen(XML(event.item)); break;
					default: throw new Error("Unhandled menu item command ["+cmd+"]!");
				}
			}
			
			private function doImportCatalog(): void {
				new FileOpener().openFile(File.desktopDirectory, onCatalogRead);
			}
			
			private var currentCatalogRead: IQuestionCatalog;
			private function onCatalogRead(fileTextContent: String): void {
				this.currentCatalogRead = CatalogParser.parse(fileTextContent);
				LOG.finer("Parsed file content to catalog: " + this.currentCatalogRead);
				
				const dao: ICatalogDao = DaoLocator.instance.catalogDao;
				
				dao.selectCatalogsByTitle(this.currentCatalogRead.title, onCatalogRead2);
			}
			
			private function onCatalogRead2(catalogs: ArrayCollection): void {
				const dao: ICatalogDao = DaoLocator.instance.catalogDao;
				
				if(catalogs.length > 0) {
					Alert.show("The catalog '"+this.currentCatalogRead.title+"' already exists!\nDo you want to import it anyway?", "Catalog already imported",
						Alert.YES | Alert.NO, this, this.onCatalogRead3, null, Alert.NO);
				} else {
					dao.insertCatalog(this.currentCatalogRead);
					Alert.show("Successfully imported the catalog '"+this.currentCatalogRead.title+"'!", "Catalog Imported");
					this.currentCatalogRead = null;
				}
				
			}
			
			private function onCatalogRead3(event: CloseEvent): void {
				if(event.detail == Alert.YES) {
					trace("inserting anyway current catalog"); // TODO implement me
				}
				this.currentCatalogRead = null;
			}
			
			private function doQuit(): void {
				LOG.info("doQuit invoked");
				nativeApplication.exit();
			}
			
			private function doToggleFullscreen(menuItem: XML): void {
				LOG.finer("doToggleFullscreen(menuItem.@toggled="+menuItem.@toggled+")");
				// if(stage.displayState == StageDisplayState.NORMAL) {
				if(menuItem.@toggled == true) {
					stage.displayState = StageDisplayState.FULL_SCREEN;
				} else {
					stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
	        
			
		]]>
	</mx:Script>
	
	<!--
	<mx:Button label="Load Question Catalog" click="doLoadQuestionCatalog()" />
	<mx:TextArea id="inpText" width="400" height="200" />
	-->
	
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Sequence target="{container}">
				<!-- <mx:Blur duration="200" blurXFrom="1.0" blurXTo="20.0" /> -->
				<mx:Blur duration="200" blurXFrom="20.0" blurXTo="1.0" />
			</mx:Sequence>
		</mx:Transition>
	</mx:transitions>
	
	
	<mx:states>
		<mx:State name="Questionairy">
			
			<mx:RemoveChild target="{homePanel}" />
			
			<mx:AddChild relativeTo="{container}">
				<view:QuestionaryPanel />
			</mx:AddChild>
			
		</mx:State>
		<mx:State name="QuestionairyFinish">
			
			<mx:RemoveChild target="{homePanel}" />
			
			<mx:AddChild relativeTo="{container}">
				<view:QuestionaryFinishPanel />
			</mx:AddChild>
			
		</mx:State>
	</mx:states>
	
	<mx:MenuBar dataProvider="{this.menuBarData}" labelField="@label"  
		itemClick="onMenuClick(event)" width="100%" />
	
	<mx:VBox id="container" width="100%" height="100%">
		<view:HomePanel id="homePanel" />
	</mx:VBox>
	
	
</mx:WindowedApplication>
