<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="vertical" applicationComplete="onComplete()">
	
	<mx:Script>
		<![CDATA[
			import mx.utils.ObjectUtil;
			import classes.Util;
			import classes.ITestQuestion;
			import mx.controls.Alert;
			import classes.INonTestQuestion;
			import mx.collections.ArrayCollection;
			import classes.Question;
			import classes.QuestionSet;
			import view.ITestQuestionRenderer;
			import classes.QuestionCatalog;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var catalog:QuestionCatalog;
			
			[Bindable]
			private var questionSet:QuestionSet;
			
			private function onComplete():void {
				// trace("onComplete()");
				this.dataFinder.send();
			}
			
			private function onResult(event:ResultEvent):void {
				// trace("onResult(event=" + event + ")");
				this.catalog = QuestionCatalog.parseXml(event.result as XML);
			}
			
			private function onFault(event:FaultEvent):void {
				trace("onFault(event.fault.message=" + event.fault.message + ")");
			}
			
			private function onCheckTest():void {
				var cntCorrect:uint = 0;
				var cntWrong:uint = 0;
				
				for each (var question:ITestQuestion in this.questionSet.questions) {
					if(question.hasUserCorrect()) {
						cntCorrect++;
					} else {
						cntWrong++;
					}
				}
				
				Alert.show("Correct: " + cntCorrect + "\nWrong: " + cntWrong, "Test Result");
			}
			
			private function onGetAll():void {
				var questions:ArrayCollection = new ArrayCollection();
				
				for each(var quest:INonTestQuestion in this.catalog.questions) {
					questions.addItem(quest.asTestQuestion());
				}
								
				this.questionSet = new QuestionSet(questions);
			}
			private function onGetRandom():void {
				var questions:ArrayCollection = new ArrayCollection();
				
				const maxCnt:uint = 3; 
				var randPositionsPot:ArrayCollection = new ArrayCollection();
				for(var i:int=0; i < this.catalog.questions.length; i++) {
					randPositionsPot.addItem(i);
				}
				
				const n:int = Math.min(maxCnt, randPositionsPot.length);
				var randPositions:ArrayCollection = new ArrayCollection();
				for(var j:int=0; j < n; j++) {
					var randPos:int = randPositionsPot.removeItemAt(Util.randomInteger(0, randPositionsPot.length-1)) as int;
					randPositions.addItem(randPos);
				}
				
				trace("random questions: " + randPositions);
				
				for each(var pos:int in randPositions) {
					var quest:INonTestQuestion = this.catalog.questions.getItemAt(pos) as INonTestQuestion;
					questions.addItem(quest.asTestQuestion());
				}
				
				this.questionSet = new QuestionSet(questions);
			}
			private function onGetClear():void {
				this.questionSet = null;
			}
			
			
		]]>
	</mx:Script>
	
	<mx:HTTPService id="dataFinder" url="questions.xml" resultFormat="e4x"
		result="onResult(event)" fault="onFault(event)" />
	
	
	<mx:VBox width="100%" height="100%">
		
		<mx:Label text="Catalog: {this.catalog.title}" />
		<mx:DataGrid
			dataProvider="{this.catalog.questions}"
			width="100%" height="100">
			<mx:columns>
				<mx:DataGridColumn headerText="Title" dataField="title" />
				<mx:DataGridColumn headerText="Type" dataField="type" />
			</mx:columns>
		</mx:DataGrid>
		
		<mx:HBox>
			<mx:Button label="Get All" click="onGetAll()"/>
			<mx:Button label="Get Random" click="onGetRandom()"/>
			<mx:Button label="Clear" click="onGetClear()"/>
		</mx:HBox>
		
		<mx:Label text="Question Set" />
		<mx:List id="questionSetList"
			dataProvider="{this.questionSet.questions}"
			itemRenderer="view.ITestQuestionRenderer"
			width="100%" height="100%"/>
		
		<mx:Button label="Check" click="onCheckTest()" />
		
	</mx:VBox>
	
</mx:WindowedApplication>
