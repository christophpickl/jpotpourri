<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
	creationComplete="onCreationComplete()" xmlns:view="code.view.*">
	
	<mx:Script>
		<![CDATA[
			import code.model.vo.Clip;
			import code.model.vo.Playlist;
			import code.model.vo.Folder;
			import code.model.vo.Library;
			import code.model.dao.DaoLocator;
			import playground.Foobar;
			import mx.collections.ArrayCollection;
			
			[Bindable] private var treeData: ArrayCollection = new ArrayCollection();
			
			
			private function onCreationComplete(): void {
				
			}
	
			private function add(): void {
				this.treeData.addItem(new Foobar());
			}
			
			
			// ----------------------------- download flv
	
			private var stream: URLStream;
			private function download(): void {
				trace("download()");
				var req:URLRequest = new URLRequest("http://www.youtube.com/get_video.php?video_id=Y48Aly3qOZg&t=OEgsToPDskJNReemr-hfY1mcoM0VXSNj");
				stream = new URLStream();
				stream.addEventListener(Event.COMPLETE, onDownloadComplete);
				
				stream.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onStream);
				stream.addEventListener(HTTPStatusEvent.HTTP_STATUS, onStream);
				stream.addEventListener(Event.ACTIVATE, onStream);
				stream.addEventListener(IOErrorEvent.IO_ERROR, onStream);
				stream.addEventListener(ProgressEvent.PROGRESS, onStream);
				stream.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onStream);
				stream.addEventListener(Event.OPEN, onStream);
				
				trace("stream.load(req);");
				stream.load(req);
			}
			
			private function onStream(event: Event): void {
				trace("onStream(event="+event+")");
			}
			private function onDownloadComplete(event: Event):void {
				trace("onDownloadComplete --- onDownloadComplete --- onDownloadComplete --- onDownloadComplete --- onDownloadComplete --- ");
				
				var fileData: ByteArray = new ByteArray();
				stream.readBytes(fileData, 0, stream.bytesAvailable);
				
				var file: File = File.documentsDirectory.resolvePath("_DELME.flv");
				trace("file.path: " + file.nativePath);
				
				var fileStream: FileStream = new FileStream();
				fileStream.open(file, FileMode.WRITE);
				fileStream.writeBytes(fileData, 0, fileData.length);
				fileStream.close();
				
			}
			
			// ------------------- Library Dao
			
			private function doInsert(): void {
				var folderOne: Folder = Folder.newDefault();
				folderOne.title = "folder1.title from dao";
				var playlistOne: Playlist = Playlist.newDefault();
				playlistOne.title = "playlist1.title within folder1 from dao";
				folderOne.content.addItem(playlistOne);
				
				var playlist: Playlist = Playlist.newDefault();
				playlist.title = "playlist.title from dao with clips";
				// id: String, title:String, url:String, duration:uint, thumbnail:Thumbnail
				var clip: Clip = new Clip("x", "clip.title", "url", 10, null);
				playlist.clips.addItem(clip);
				
				var rootFolder: Folder = Folder.newDefault();
				rootFolder.title = "-ROOTFOLDER-";
				
				rootFolder.content.addItem(playlist);
				rootFolder.content.addItem(folderOne);
				
				// library gots rootfolder with only one playlist directly in it
				var library: Library = new Library(rootFolder);
				DaoLocator.instance.libraryDao.insertLibrary(library);
			}
			private function doSelect(): void {
				DaoLocator.instance.libraryDao.fetchLibrary(this.onSelected);
			}
			private function onSelected(lib: Library): void {
				this.dataLibraryDao = lib.rootFolder.content;
			}
			[Bindable] private var dataLibraryDao: ArrayCollection = new ArrayCollection();
			
		]]>
	</mx:Script>
	
	<mx:Tree dataProvider="{this.treeData}" />
	
	<mx:HBox>
		<mx:Button label="add" click="this.add()" />
		<mx:Button label="download" click="this.download()" />
	</mx:HBox>
	
	<view:LibraryTree width="250" height="120" dataProvider="{this.dataLibraryDao}" />
	
	<mx:HBox>
		<mx:Button label="DAO.insert" click="this.doInsert()" />
		<mx:Button label="DAO.select" click="this.doSelect()" />
	</mx:HBox>
	
</mx:WindowedApplication>
